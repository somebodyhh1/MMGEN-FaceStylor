{"env_info": "sys.platform: linux\nPython: 3.9.13 | packaged by conda-forge | (main, May 27 2022, 16:58:50) [GCC 10.3.0]\nCUDA available: True\nCUDA_HOME: /usr/local/cuda-11.2\nNVCC: Build cuda_11.2.r11.2/compiler.29618528_0\nGPU 0: NVIDIA GeForce RTX 3090\nGCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0\nPyTorch: 1.10.0\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.0\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMGen: 0.7.2+37fe107\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.3", "config": "stylegan_weights = 'https://download.openmmlab.com/mmgen/stylegan2/stylegan2_c2_ffhq_1024_b4x8_20210407_150045-618c9024.pth'\nd_reg_interval = 16\ng_reg_interval = 4\ng_reg_ratio = 0.8\nd_reg_ratio = 0.9411764705882353\nmodel = dict(\n    type='PSPTransfer',\n    src_generator=dict(\n        type='StyleGANv2Generator',\n        out_size=1024,\n        style_channels=512,\n        num_mlps=8,\n        pretrained=dict(\n            ckpt_path=\n            'https://download.openmmlab.com/mmgen/stylegan2/stylegan2_c2_ffhq_1024_b4x8_20210407_150045-618c9024.pth',\n            prefix='generator_ema')),\n    generator=dict(\n        type='SwapStyleGANv2Generator',\n        out_size=1024,\n        style_channels=512,\n        num_mlps=8,\n        pretrained=dict(\n            ckpt_path=\n            'https://download.openmmlab.com/mmgen/stylegan2/stylegan2_c2_ffhq_1024_b4x8_20210407_150045-618c9024.pth',\n            prefix='generator_ema')),\n    discriminator=dict(\n        type='ADAStyleGAN2Discriminator',\n        in_size=1024,\n        pretrained=dict(\n            ckpt_path=\n            'https://download.openmmlab.com/mmgen/stylegan2/stylegan2_c2_ffhq_1024_b4x8_20210407_150045-618c9024.pth',\n            prefix='discriminator'),\n        data_aug=dict(\n            type='ADAAug',\n            aug_pipeline=dict(\n                xflip=1,\n                rotate90=1,\n                xint=1,\n                scale=1,\n                rotate=1,\n                aniso=1,\n                xfrac=1,\n                brightness=1,\n                contrast=1,\n                lumaflip=1,\n                hue=1,\n                saturation=1))),\n    gan_loss=dict(type='GANLoss', gan_type='hinge'),\n    disc_auxiliary_loss=dict(\n        type='R1GradientPenalty',\n        loss_weight=80.0,\n        interval=16,\n        norm_mode='HWC',\n        data_info=dict(real_data='real_imgs', discriminator='disc')),\n    gen_auxiliary_loss=dict(\n        type='GeneratorPathRegularizer',\n        loss_weight=8.0,\n        pl_batch_shrink=2,\n        interval=4,\n        data_info=dict(generator='gen', num_batches='batch_size')),\n    lpips_lambda=0.5,\n    freezeD=5)\ntrain_cfg = dict(use_ema=True)\ntest_cfg = None\noptimizer = dict(\n    generator=dict(type='Adam', lr=0.0016, betas=(0, 0.9919919678228657)),\n    discriminator=dict(\n        type='Adam', lr=0.0018823529411764706, betas=(0, 0.9905854573074332)))\ndataset_type = 'UnconditionalImageDataset'\ntrain_pipeline = [\n    dict(type='LoadImageFromFile', key='real_img', io_backend='disk'),\n    dict(type='Flip', keys=['real_img'], direction='horizontal'),\n    dict(\n        type='Normalize',\n        keys=['real_img'],\n        mean=[127.5, 127.5, 127.5],\n        std=[127.5, 127.5, 127.5],\n        to_rgb=False),\n    dict(type='ImageToTensor', keys=['real_img']),\n    dict(type='Collect', keys=['real_img'], meta_keys=['real_img_path'])\n]\nval_pipeline = [\n    dict(type='LoadImageFromFile', key='real_img', io_backend='disk'),\n    dict(\n        type='Normalize',\n        keys=['real_img'],\n        mean=[127.5, 127.5, 127.5],\n        std=[127.5, 127.5, 127.5],\n        to_rgb=True),\n    dict(type='ImageToTensor', keys=['real_img']),\n    dict(type='Collect', keys=['real_img'], meta_keys=['real_img_path'])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='RepeatDataset',\n        times=100,\n        dataset=dict(\n            type='UnconditionalImageDataset',\n            imgs_root=\n            '/home/somebody/MMGEN-FaceStylor/data/4_Dance_of_the_River',\n            pipeline=[\n                dict(\n                    type='LoadImageFromFile',\n                    key='real_img',\n                    io_backend='disk'),\n                dict(type='Flip', keys=['real_img'], direction='horizontal'),\n                dict(\n                    type='Normalize',\n                    keys=['real_img'],\n                    mean=[127.5, 127.5, 127.5],\n                    std=[127.5, 127.5, 127.5],\n                    to_rgb=False),\n                dict(type='ImageToTensor', keys=['real_img']),\n                dict(\n                    type='Collect',\n                    keys=['real_img'],\n                    meta_keys=['real_img_path'])\n            ])),\n    val=dict(\n        type='UnconditionalImageDataset',\n        imgs_root='/home/somebody/MMGEN-FaceStylor/data/4_Dance_of_the_River',\n        pipeline=[\n            dict(type='LoadImageFromFile', key='real_img', io_backend='disk'),\n            dict(\n                type='Normalize',\n                keys=['real_img'],\n                mean=[127.5, 127.5, 127.5],\n                std=[127.5, 127.5, 127.5],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['real_img']),\n            dict(\n                type='Collect', keys=['real_img'], meta_keys=['real_img_path'])\n        ]))\ncheckpoint_config = dict(interval=100, by_epoch=False, max_keep_ckpts=100)\nlog_config = dict(interval=100, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [\n    dict(\n        type='VisualizeUnconditionalSamples',\n        output_dir='training_samples',\n        interval=100),\n    dict(\n        type='ExponentialMovingAverageHook',\n        module_keys=('generator_ema', ),\n        interval=1,\n        start_iter=1,\n        interp_cfg=dict(momentum=0.999),\n        priority='VERY_HIGH')\n]\nrunner = dict(\n    type='DynamicIterBasedRunner',\n    is_dynamic_ddp=False,\n    pass_training_status=True)\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = None\nresume_from = None\nworkflow = [('train', 10000)]\nfind_unused_parameters = True\ncudnn_benchmark = True\nimgs_root = '/home/somebody/MMGEN-FaceStylor/data/4_Dance_of_the_River'\naug_kwargs = dict(\n    xflip=1,\n    rotate90=1,\n    xint=1,\n    scale=1,\n    rotate=1,\n    aniso=1,\n    xfrac=1,\n    brightness=1,\n    contrast=1,\n    lumaflip=1,\n    hue=1,\n    saturation=1)\nlr_config = None\ntotal_iters = 600\nuse_ddp_wrapper = True\nwork_dir = 'test_work_dir'\ngpu_ids = range(2, 3)\n", "seed": 2021, "exp_name": "config.py"}
